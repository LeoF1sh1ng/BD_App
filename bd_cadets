import sqlite3

conn = sqlite3.connect('database.db')
cur = conn.cursor()
cur.execute('CREATE TABLE IF NOT EXISTS divisions (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)')
conn.commit()
cur.execute('CREATE TABLE IF NOT EXISTS cadets (id INTEGER PRIMARY KEY AUTOINCREMENT, FirstName TEXT, MiddleName '
            'TEXT, LastName TEXT, BirthDate DATE, Rank TEXT, Division INTEGER)')
conn.commit()
cur.execute('CREATE TABLE IF NOT EXISTS officer (id INTEGER PRIMARY KEY AUTOINCREMENT, FirstName TEXT, MiddleName '
            'TEXT, LastName TEXT, BirthDate DATE, Rank TEXT, Division INTEGER)')
conn.commit()

###   ADD FUNCTIONS

def add_division(name):
    cur.execute('INSERT INTO divisions (name) VALUES (?)', (name,))
    conn.commit()
    print('Ok')


def add_cadet(FirstName, MiddleName, LastName, BirthDate, Rank, Division):
    cur.execute('INSERT INTO cadets (FirstName, MiddleName, LastName, BirthDate, Rank, Division) VALUES (?,?,?,?,?,?)',
                (FirstName, MiddleName, LastName, BirthDate, Rank, Division))
    conn.commit()
    print('Ok')


def add_officer(FirstName, MiddleName, LastName, BirthDate, Rank, Division):
    cur.execute('INSERT INTO officer (FirstName, MiddleName, LastName, BirthDate, Rank, Division) VALUES (?,?,?,?,?,?)',
                (FirstName, MiddleName, LastName, BirthDate, Rank, Division))
    conn.commit()
    print('Ok')

###   LIST FUNCTIONS

def list_divisions():
    cur.execute('SELECT * FROM divisions')
    rows = cur.fetchall()
    for row in rows:
        print('{Division: {Id: ' + row[0] + ', Name: ' + row[1] + '}}')

def list_divisions_id():
    cur.execute('SELECT * FROM divisions ORDER BY id')
    rows = cur.fetchall()
    for row in rows:
        print('{Division: {Id: ' + row[0] + ', Name: ' + row[1] + '}}')

def list_divisions_name():
    cur.execute('SELECT * FROM divisions ORDER BY name')
    rows = cur.fetchall()
    for row in rows:
        print('{Division: {Id: ' + row[0] + ', Name: ' + row[1] + '}}')





def list_cadets():
    cur.execute('SELECT * FROM cadets')
    rows = cur.fetchall()
    for row in rows:
        print('{Cadet: {Id: ' + row[0] + ', Rank: ' + row[5] + ', FirstName: ' + row[1] + ', MiddleName: ' + row[
            2] + ', LastName: ' + row[3] + ', BirthDate: ' + row[4] + + '}}')

def list_cadets_id():
    cur.execute('SELECT * FROM cadets ORDER BY id')
    rows = cur.fetchall()
    for row in rows:
        print('{Cadet: {Id: ' + row[0] + ', Rank: ' + row[5] + ', FirstName: ' + row[1] + ', MiddleName: ' + row[
            2] + ', LastName: ' + row[3] + ', BirthDate: ' + row[4] + + '}}')

def list_cadets_LastName():
    cur.execute('SELECT * FROM cadets ORDER BY LastName')
    rows = cur.fetchall()
    for row in rows:
        print('{Cadet: {Id: ' + row[0] + ', Rank: ' + row[5] + ', FirstName: ' + row[1] + ', MiddleName: ' + row[
            2] + ', LastName: ' + row[3] + ', BirthDate: ' + row[4] + + '}}')

def list_cadets_div():
    cur.execute('SELECT * FROM cadets ORDER BY Division')
    rows = cur.fetchall()
    for row in rows:
        print('{Cadet: {Id: ' + row[0] + ', Rank: ' + row[5] + ', FirstName: ' + row[1] + ', MiddleName: ' + row[
            2] + ', LastName: ' + row[3] + ', BirthDate: ' + row[4] + + '}}')

def list_cadets_rank():
    cur.execute('SELECT * FROM cadets ORDER BY Rank DESC')
    rows = cur.fetchall()
    for row in rows:
        print('{Cadet: {Id: ' + row[0] + ', Rank: ' + row[5] + ', FirstName: ' + row[1] + ', MiddleName: ' + row[
            2] + ', LastName: ' + row[3] + ', BirthDate: ' + row[4] + + '}}')






def list_officers():
    cur.execute('SELECT * FROM officers')
    rows = cur.fetchall()
    for row in rows:
        print('{Officer: {Id:'+ row[0] + ', Rank:'+ row[5] + ', FirstName:'+ row[1] + ', MiddleName:'+ row[
            2] + ', LastName:'+ row[3] + ', BirthDate:'+ row[4] + + '}}')

def list_officers_id():
    cur.execute('SELECT * FROM officers ORDER BY id')
    rows = cur.fetchall()
    for row in rows:
        print('{Officer: {Id:'+ row[0] + ', Rank:'+ row[5] + ', FirstName:'+ row[1] + ', MiddleName:'+ row[
            2] + ', LastName:'+ row[3] + ', BirthDate:'+ row[4] + + '}}')

def list_officers_LastName():
    cur.execute('SELECT * FROM officers ORDER BY LastName')
    rows = cur.fetchall()
    for row in rows:
        print('{Officer: {Id:'+ row[0] + ', Rank:'+ row[5] + ', FirstName:'+ row[1] + ', MiddleName:'+ row[
            2] + ', LastName:'+ row[3] + ', BirthDate:'+ row[4] + + '}}')

def list_officer_div():
    cur.execute('SELECT * FROM officers ORDER BY Division')
    rows = cur.fetchall()
    for row in rows:
        print('{Officer: {Id:'+ row[0] + ', Rank:'+ row[5] + ', FirstName:'+ row[1] + ', MiddleName:'+ row[
            2] + ', LastName:'+ row[3] + ', BirthDate:'+ row[4] + + '}}')

def list_officers_rank():
    cur.execute('SELECT * FROM officers ORDER BY Rank DESC')
    rows = cur.fetchall()
    for row in rows:
        print('{Officer: {Id:'+ row[0] + ', Rank:'+ row[5] + ', FirstName:'+ row[1] + ', MiddleName:'+ row[
            2] + ', LastName:'+ row[3] + ', BirthDate:'+ row[4] + + '}}')

def list_officers_id():
    cur.execute('SELECT * FROM officers ORDER BY id')
    rows = cur.fetchall()
    for row in rows:
        print('{Officer: {Id:'+ row[0] + ', Rank:'+ row[5] + ', FirstName:'+ row[1] + ', MiddleName:'+ row[
            2] + ', LastName:'+ row[3] + ', BirthDate:'+ row[4] + + '}}')


### DELETE
def delete_division(id):
    cur.execute('DELETE FROM divisions WHERE id =?', (id,))
    conn.commit()
    print('Ok')

def delete_all_division():
    cur.execute('DELETE FROM divisions')
    conn.commit()
    print('Ok')




def delete_cadet(id):
    cur.execute('DELETE FROM cadets WHERE id =?', (id,))
    conn.commit()
    print('Ok')

def delete_cadet_division(division):
    cur.execute('DELETE FROM cadets WHERE Division =?', (division,))
    conn.commit()
    print('Ok')

def delete_cadet_OfficerID(OfficierID):
    DivID = cur.execute('SELECT Division FROM officers WHERE id =?', (OfficierID,)).fetchall()[0]
    cur.execute('DELETE FROM cadets WHERE Division =?', (DivID,))
    conn.commit()
    print('Ok')

def delete_all_cadets():
    cur.execute('DELETE FROM cadets')
    conn.commit()
    print('Ok')





def delete_officer(id):
    cur.execute('DELETE FROM officers WHERE id =?', (id,))
    conn.commit()
    print('Ok')
    
def delete_all_officers():
    cur.execute('DELETE FROM officers')
    conn.commit()
    print('Ok')



### EDIT

def edit_division(id, name):
    cur.execute('UPDATE divisions SET name =? WHERE id =?', (name, id))
    conn.commit()
    print('Ok')

def edit_cadet(id, parametr, update):
    if parametr == '-f':
        cur.execute('UPDATE cadets SET FirstName =? WHERE id =?', (update, id))
        conn.commit()
    elif parametr == '-m':
        cur.execute('UPDATE cadets SET MiddleName =? WHERE id =?', (update, id))
        conn.commit()
    elif parametr == '-L':
        cur.execute('UPDATE cadets SET LastName =? WHERE id =?', (update, id))
        conn.commit()
    elif parametr == 'd':
        cur.execute('UPDATE cadets SET BithDate =? WHERE id =?', (update, id))
    elif parametr == '-r':
        cur.execute('UPDATE cadets SET Rank =? WHERE id =?', (update, id))
    elif parametr == '-d':
        cur.execute('UPDATE cadets SET Division =? WHERE id =?', (update, id))


def edit_officer(id, parametr, update):
    if parametr == '-f':
        cur.execute('UPDATE officers SET FirstName =? WHERE id =?', (update, id))
        conn.commit()
    elif parametr == '-m':
        cur.execute('UPDATE officers SET MiddleName =? WHERE id =?', (update, id))
        conn.commit()
    elif parametr == '-L':
        cur.execute('UPDATE officers SET LastName =? WHERE id =?', (update, id))
        conn.commit()
    elif parametr == 'd':
        cur.execute('UPDATE officers SET BithDate =? WHERE id =?', (update, id))
    elif parametr == '-r':
        cur.execute('UPDATE officers SET Rank =? WHERE id =?', (update, id))
    elif parametr == '-d':
        cur.execute('UPDATE officers SET Division =? WHERE id =?', (update, id))
